[{"title":"test","date":"2019-11-21T12:23:44.211Z","path":"2019/11/21/test/","text":"图的定义：图由顶点和边组成，每条边的两端是图的两个顶点。记作G(V,E），V是顶点集，E 为边集。一般图分为有向图和无向图。顶点的度是指和该顶点相连的边的条数。特变的对于有向图，顶点的出边条数成为出度，顶点的蠕变条数成为入度。顶点和边都可以由一些属性，称为点权和边权。 图的存储：图可以使用两种存储方式：邻接矩阵和邻接表。 邻接矩阵：适合顶点数目不多的稠密图。设图G(V,E)的顶点编号为0-N-1，那么可以令二维数组G[N][N]的两维分别表示图的顶点标号，及如果G[i][j]的值为1，表示i和j之间有变。这个二维矩阵被称为邻接矩阵。并且如果存在边权可以让G[N][N]中存放边权。无向图的邻接矩阵是对称矩阵。 邻接表:适合顶点个数较多的稀疏图。设图G(V,E)的顶点标号为0，1，… ，N-1，每个顶点都有可能有若干条出边，如果把同一个顶点的所有出边放在一个列表中，那么N个顶点就会有N个列表（没有出边，对应空表）。这N个列表被称为图的邻接表。记作Adj[N]。邻接表实现可以使用变长数组vector，开一个vector数组Adj[N], N是顶点个数，每个顶点对应一个变长数组，存储其出边。如下所示：&lt;Vector&lt;int&gt; Adj[N];&gt;如果节点还有权值，我们可以定义一个结构体： 1234Struct Node&#123; Int v; Int w;&#125;; 然后vector邻接表中的元素类型就是Node型的。&lt;Vector&lt;Node&gt; Adj[N];&gt; 图的遍历：是指对图的所有顶点按一定顺序进行访问，遍历方法一般有两种：深度优先搜索（DFS）和广度优先搜索（BFS）。 深度优先搜索以“深度”作为第一关键词，每次都沿着路径到不能再前进时才退回到最近的岔路口。DFS的具体实现，首先介绍两个概念：连通分量。在无向图中，如果两个顶点之间可以相互到达（可以是通过一定路径间接到达），那么就称这两个顶点连通。如果图G(V,E)的任意两个顶点都连通，则通图G为连通图，否则称G为非连通图，且称其中的极大连通子图为连通分量。强连通分量。在有向图中，如果俩ing个顶点可以各自通过一条有向路径到达另一个顶点，就称这两个顶点强连通。如果图G(V,E)的任意两个顶点都强连通，则称图G为强连通图；否则称G为非强连通图，且称其中的极大强连通子图为强连通分量。如果要遍历一个图就要对所有的连通块进行遍历，如果已知的图是连通图，则只需要一次DFS遍历就可以完成。DFS的伪代码：（可以使用临界矩阵和邻接表实现） 12345678910111213DFS(u)&#123;//访问顶点u vis[u] = true; //设置u为已访问 for(从u出发能到达的所有顶点v)&#123; //枚举从u出发可以到达的所有顶点v if(vis[v] == false)&#123; DFS(v); &#125;&#125;DFSTrave(G)&#123; //遍历图 for(G 的所有顶点u) //对G的所有顶点u if vis[u] == false //如果u未被访问 DFS(u); //访问u所在的连通块 &#125; 广度优先搜索（BFS）遍历图广度优先搜索以“广度”作为关键词，每次以扩散的方式向外访问顶点。和树的遍历一样，使用BFS遍历图需要使用一个队列，通过反复取出队首顶点，将该顶点可到达的未曾加入过队列的顶点全部入队，（而不是未被访问）直到队列为空时遍历结束。可以查看下面的伪代码，根据思路可以使用邻接表和临界矩阵进行实现。 12345678910111213141516171819BFS(u)&#123; //遍历u所在的连通块 queue q;//定义队列q 将u入队； inq[u] = true; while(q 非空)&#123; 取出队首元素u进行访问； for(从u出发可达到的所有顶点v) if( inq[v] == false) &#123; //如果v未曾加入过队列 将v入队； inq[v] = true; &#125; &#125;&#125;BFSTrave(G)&#123; for(G 的所有顶点u) if(inq[u] == false)&#123; //如果u未曾加入过队列 BFS(u); //遍历u所在的连通块 &#125;&#125; 最短路径问题：最小生成树（Minimum Spanning Tree,MST）：是在一个给定的无向图G(V,E)中求一棵树T,使这棵树拥有图G中的所有顶点，且所有边都来自图G中，并且满足整棵树的边权之和最小。最小生成树有三个性质需要掌握： 1. 最小生成树是树，因此其边数等于顶点数减一，且树内一定不会有环。 2. 对给定的图G(V,E)，其最小生成树可以不唯一，但其边权之和一定是唯一的。 3. 由于最小生成树是在无向图上生成的，因此其根节点可以是这棵树上的任意一个结点。一般为了输出唯一，会指定一个结点作为根节点。常用的算法有：Prim（普利姆算法）和 Kruskal算法（克鲁斯卡尔算法） Prim算法伪代码如下，其时间复杂度为O(V^2)，如果图用邻接表实现，可以使用堆优化即使用优先级队列将复杂度降低为O(VlogV + E)： 1234567891011121314G为图，S是以及加入图中的顶点集，数组d为顶点与集合S的最短距离Prim(G,d[])&#123; 初始化G[],d[],d[1] = 0; for(循环n次) &#123; u = 使d[u]最小的还未被访问的顶点的标号； 记录u已被访问； for(从 u 出发能到达的所有顶点v)&#123; if(v 未被访问 &amp;&amp; 以u为中介点使得v与集合S的最短距离d[v]更优)&#123; 将G[u][v]赋值给d[v]; &#125; &#125; &#125;&#125; Kruskal算法伪代码如下，其时间负责度主要在拍于函数上，是O(ElogE)，其中E是图的边数。 1234567891011121314int kruskal()&#123; 令最小生成树的边权之和为ans,最小生成树的当前边数Num_edge; 将所有边按照边权从小到达排序; for(从小到大枚举所有边) &#123; if(当前测试边的两个端点在不同的连通块中)&#123; //判断是否在一个联通块中可以使用并查集 将该测试边加入最小生成树; ans += 测试边的边权; 最小生成树的当前边数num_edge+1; 当前边数num_edge 等于定点数减一时结束循环; &#125; &#125; return ans;&#125; 从上面的时间复杂度分析可知，Prim 算法的时间复杂度与V相关，适合稠密图（顶点少边多），而kruskal算法的实际复杂度与E的数目有关，适合稀疏图（顶点多，边少）。 拓扑排序：关键路径：参考内容：《算法笔记》 胡凡 曾磊主编","tags":[]},{"title":"Markdown使用教程","date":"2019-10-27T14:13:47.236Z","path":"2019/10/27/Markdown使用教程/","text":"title: this is my first blog 欢迎使用Markdown编辑器你好！ 这是你第一次使用 Markdown编辑器 所展示的欢迎页。如果你想学习如何使用Markdown编辑器, 可以仔细阅读这篇文章，了解一下Markdown的基本语法知识。 新的改变我们对Markdown编辑器进行了一些功能拓展与语法支持，除了标准的Markdown编辑器功能，我们增加了如下几点新功能，帮助你用它写博客： 全新的界面设计 ，将会带来全新的写作体验； 在创作中心设置你喜爱的代码高亮样式，Markdown 将代码片显示选择的高亮样式 进行展示； 增加了 图片拖拽 功能，你可以将本地的图片直接拖拽到编辑区域直接展示； 全新的 KaTeX数学公式 语法； 增加了支持甘特图的mermaid语法^1 功能； 增加了 多屏幕编辑 Markdown文章功能； 增加了 焦点写作模式、预览模式、简洁写作模式、左右区域同步滚轮设置 等功能，功能按钮位于编辑区域与预览区域中间； 增加了 检查列表 功能。 功能快捷键撤销：Ctrl/Command + Z重做：Ctrl/Command + Y加粗：Ctrl/Command + B斜体：Ctrl/Command + I标题：Ctrl/Command + Shift + H无序列表：Ctrl/Command + Shift + U有序列表：Ctrl/Command + Shift + O检查列表：Ctrl/Command + Shift + C插入代码：Ctrl/Command + Shift + K插入链接：Ctrl/Command + Shift + L插入图片：Ctrl/Command + Shift + G查找：Ctrl/Command + F替换：Ctrl/Command + G 合理的创建标题，有助于目录的生成直接输入1次#，并按下space后，将生成1级标题。输入2次#，并按下space后，将生成2级标题。以此类推，我们支持6级标题。有助于使用TOC语法后生成一个完美的目录。 如何改变文本的样式强调文本 强调文本 加粗文本 加粗文本 ==标记文本== 删除文本 引用文本 H2O is是液体。 2^10^ 运算结果是 1024. 插入链接与图片链接: link. 图片: 带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw =30x30) 居中的图片: 居中并且带尺寸的图片: ![Alt](https://imgconvert.csdnimg.cn/aHR0cHM6Ly9hdmF0YXIuY3Nkbi5uZXQvNy83L0IvMV9yYWxmX2h4MTYzY29tLmpwZw#pic_center =30x30) 当然，我们为了让用户更加便捷，我们增加了图片拖拽功能。 如何插入一段漂亮的代码片去博客设置页面，选择一款你喜欢的代码片高亮样式，下面展示同样高亮的 代码片. 12// An highlighted blockvar foo = 'bar'; 生成一个适合你的列表 项目 项目 项目 项目1 项目2 项目3 计划任务 完成任务 创建一个表格一个简单的表格是这么创建的：项目 | Value——– | —–电脑 | $1600手机 | $12导管 | $1 设定内容居中、居左、居右使用:---------:居中使用:----------居左使用----------:居右| 第一列 | 第二列 | 第三列 ||:———–:| ————-:|:————-|| 第一列文本居中 | 第二列文本居右 | 第三列文本居左 | SmartyPantsSmartyPants将ASCII标点字符转换为“智能”印刷标点HTML实体。例如：| TYPE |ASCII |HTML|—————-|——————————-|—————————–||Single backticks|&#39;Isn&#39;t this fun?&#39; |’Isn’t this fun?’ ||Quotes |&quot;Isn&#39;t this fun?&quot; |”Isn’t this fun?” ||Dashes |-- is en-dash, --- is em-dash|– is en-dash, — is em-dash| 创建一个自定义列表MarkdownText-to-HTML conversion toolAuthors: JohnLuke如何创建一个注脚一个具有注脚的文本。^2 注释也是必不可少的Markdown将文本转换为 HTML。 *[HTML]: 超文本标记语言 KaTeX数学公式您可以使用渲染LaTeX数学表达式 KaTeX: Gamma公式展示 $\\Gamma(n) = (n-1)!\\quad\\foralln\\in\\mathbb N$ 是通过欧拉积分 $$\\Gamma(z) = \\int_0^\\infty t^{z-1}e^{-t}dt,.$$ 你可以找到更多关于的信息 LaTeX 数学表达式here. 新的甘特图功能，丰富你的文章12345678gantt dateFormat YYYY-MM-DD title Adding GANTT diagram functionality to mermaid section 现有任务 已完成 :done, des1, 2014-01-06,2014-01-08 进行中 :active, des2, 2014-01-09, 3d 计划一 : des3, after des2, 5d 计划二 : des4, after des3, 5d 关于 甘特图 语法，参考 这儿, UML 图表可以使用UML图表进行渲染。 Mermaid. 例如下面产生的一个序列图： 123456789sequenceDiagram张三 -&gt;&gt; 李四: 你好！李四, 最近怎么样?李四--&gt;&gt;王五: 你最近怎么样，王五？李四--x 张三: 我很好，谢谢!李四-x 王五: 我很好，谢谢!Note right of 王五: 李四想了很长时间, 文字太长了&lt;br/&gt;不适合放在一行.李四--&gt;&gt;张三: 打量着王五...张三-&gt;&gt;王五: 很好... 王五, 你怎么样? 这将产生一个流程图。: 12345graph LRA[长方形] -- 链接 --&gt; B((圆))A --&gt; C(圆角长方形)B --&gt; D&#123;菱形&#125;C --&gt; D 关于 Mermaid 语法，参考 这儿, FLowchart流程图我们依旧会支持flowchart的流程图： 123456789flowchatst=&gt;start: 开始e=&gt;end: 结束op=&gt;operation: 我的操作cond=&gt;condition: 确认？st-&gt;op-&gt;condcond(yes)-&gt;econd(no)-&gt;op 关于 Flowchart流程图 语法，参考 这儿. 导出与导入导出如果你想尝试使用此编辑器, 你可以在此篇文章任意编辑。当你完成了一篇文章的写作, 在上方工具栏找到 文章导出 ，生成一个.md文件或者.html文件进行本地保存。 导入如果你想加载一篇你写过的.md文件，在上方工具栏可以选择导入功能进行对应扩展名的文件导入，继续你的创作。","tags":[]},{"title":"Hello World","date":"2019-10-24T14:14:38.796Z","path":"2019/10/24/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]